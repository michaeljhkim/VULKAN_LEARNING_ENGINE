- CONSIDER USING DOCKERS FOR DEPENDENCIES INSTEAD OF CMAKE FetchContent


- Octrees are used to split the game world into smaller and smaller pieces
- This is so that when collisions occur, we do not need to loop through every single object and check what exactly collided
- This section is currently the reason why my code is crashing. Newframe is processing and updating the octree, but something causes a segfault when sphere appears

- collision/bounding boxes do not rotate. This is less taxing on cpu
- considering bounding columns for smoothness (will definitely be more taxing)

- octree update function is where segfault occurs. Not sure why


- MUST CONVERT POINTERS TO SMART POINTERS


- vulkan allows you to not bind anything UNTIL the very end. In the meantime, you create buffers and change up the buffer as needed

- In either opengl or vulkan, the rigid body would be translated and rotated all in code
- All the Shader does later is then just moving it according to how you translated it earlier

- the variables in the layout part of the vertex shader indicate that we are taking from the buffer, rather than defining certain variables later 

- Vert shader inputs from c++ code, then outputs to frag shader

- Mesh only holds onto diffuse and specular, just so that the model knows how to light up a texture

- Textures are stored in an array globally in model. Texture is it's own thing from materials

- this descriptors code accomodate more than just VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, without modifications
- However, it will depend on how many addBinding you call on build  
- check main and remember why you did that as a test
- textures don't actually get bound and drawn. Vulkan just looks at where the texture is and where it should be. So it is all handled in descriptors

- Must seperate gameobject instances and model instances in scene so that I can load a model without it being a gameobject for performance and modularity

- We are implementing sparse buffers for models and indirect draw right now because we are focusing on dynamic models and it is more efficient,
- but remember to implement regular buffers and regular draw for static models. For static models, it should be more efficient

- My amd rx 6900xt has 3 queue families, the last one having sparse resource support

- DO NOT JUST USE SPARSE BUFFERS EVERYWHERE!!!!! ONLY USE IT WHEN ABSOLUTELY NESSECARY!!!!!
- Check sparse_buffer_notes.txt for more details, but generally, it should only be used for massive models and such. 

- Let each model and their instances have their own buffers. Doing some research, having one big buffer for such dynamic models is a bad idea
- Technically faster, but also so much more overhead. Not worth it
- Keep sparse buffer and sparse image creation stuff because it will be useful for massive models in the future.


- Consider making a buffer pool, where there is just a massive buffer for data like vertices or index or instances or e.t.c...
- There can also be multiple buffer pools, each sized according to how predictable a certain amount of objects are on screen
- Should only use for entities we know will be there constantly


- Create a texture tiling system, that breaks up textures into a consistent height x width, then saves the tile in a custom binary file 
- This is virtual textures or texture streaming
- I think this is also called sparse textures or sparse images or something
- Consider mip maps, and texture compressing

- Run a function before anything else (as developer, so should not be on every runtime) that creates the custom file, then stores the textures as tiles

