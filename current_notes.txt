- Octrees are used to split the game world into smaller and smaller pieces
- This is so that when collisions occur, we do not need to loop through every single object and check what exactly collided
- This section is currently the reason why my code is crashing. Newframe is processing and updating the octree, but something causes a segfault when sphere appears

- collision/bounding boxes do not rotate. This is less taxing on cpu
- considering bounding columns for smoothness (will definitely be more taxing)

- octree update function is where segfault occurs. Not sure why


- MUST CONVERT POINTERS TO SMART POINTERS


- vulkan allows you to not bind anything UNTIL the very end. In the meantime, you create buffers and change up the buffer as needed

- In either opengl or vulkan, the rigid body would be translated and rotated all in code
- All the Shader does later is then just moving it according to how you translated it earlier

- the variables in the layout part of the vertex shader indicate that we are taking from the buffer, rather than defining certain variables later 

- Vert shader inputs from c++ code, then outputs to frag shader

- Mesh only holds onto diffuse and specular, just so that the model knows how to light up a texture

- Textures are stored in an array globally in model. Texture is it's own thing from materials

- this descriptors code accomodate more than just VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, without modifications
- However, it will depend on how many addBinding you call on build  
- check main and remember why you did that as a test